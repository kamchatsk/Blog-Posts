<#@ include file="MultiOutput.tt" #>
<#@ include file="EFBase.tt"#>
<#@ include file="EFBase.Settings.tt"#>


<#
	var baseInterfaceName = (Settings.BaseContextInterfaceName == "") ? "IContext" : Settings.BaseContextInterfaceName;
	var modelName = (Settings.ModelContextName == "") ? "" : Settings.ModelContextName;
	var modelInterfaceName = (Settings.BaseModelContextInterfaceName == "") ? "" : Settings.BaseModelContextInterfaceName;
	modelInterfaceName = (modelInterfaceName=="") ? ((modelName=="") ? "" : "I" + modelName) : modelInterfaceName;

	var baseInterfaceFileName = GenerateBaseIContext(baseInterfaceName);
    SaveOutput(string.Format("{0}.{1}", baseInterfaceFileName, "cs"));

	var modelInterfaceFileName = GenerateModelIContext(modelInterfaceName);
    SaveOutput(string.Format("{0}.{1}", modelInterfaceFileName, "cs"));

	var modelFileName = GenerateModelContext(modelName, modelInterfaceName);
    SaveOutput(string.Format("{0}.{1}", modelFileName, "cs"));
	
	DeleteOldOutputs();
#>


 <#+

   
    string GenerateModelContext(string modelName, string modelInterfaceName)
    {
		string inputFile = Settings.ModelPath;
		
		var textTransform = DynamicTextTransformation.Create(this);
		var code = new CodeGenerationTools(this);
		var ef = new MetadataTools(this);
		var typeMapper = new TypeMapper(code, ef, textTransform.Errors);
		var	fileManager = EntityFrameworkTemplateFileManager.Create(this);
		var loader = new EdmMetadataLoader(textTransform.Host, textTransform.Errors);
		var itemCollection = loader.CreateEdmItemCollection(inputFile);
		var modelNamespace = loader.GetModelNamespace(inputFile);
		var codeStringGenerator = new CodeStringGenerator(code, typeMapper, ef);
		
		var container = itemCollection.OfType<EntityContainer>().FirstOrDefault();
		if (container == null)
		{
			return "";
		}

		modelName = ((string.IsNullOrEmpty(modelName)) ? code.Escape(container) : modelName);
		modelInterfaceName = ((string.IsNullOrEmpty(modelInterfaceName)) ? "I" + code.Escape(container) : modelInterfaceName);
#>
//------------------------------------------------------------------------------
// <auto-generated>
// <#=GetResourceString("Template_GeneratedCodeCommentLine1")#>
//
// <#=GetResourceString("Template_GeneratedCodeCommentLine2")#>
// <#=GetResourceString("Template_GeneratedCodeCommentLine3")#>
// </auto-generated>
//------------------------------------------------------------------------------
<#+
var codeNamespace = code.VsNamespaceSuggestion();
if (!String.IsNullOrEmpty(codeNamespace))
{
#>
namespace <#=code.EscapeNamespace(codeNamespace)#>
{
<#+
    PushIndent("    ");
}
#>
using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
<#+
if (container.FunctionImports.Any())
{
#>
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
<#+
}
#>

<#=Accessibility.ForType(container)#> partial class <#=modelName#> : DbContext, <#=modelInterfaceName#>
{

	public <#=modelName#>() : base("name=<#=container.Name#>")
    {
<#+
		if (!loader.IsLazyLoadingEnabled(container))
		{			
#>
			this.Configuration.LazyLoadingEnabled = false;
<#+
		}
#>
    }
	protected override void OnModelCreating(DbModelBuilder modelBuilder)
    {
        throw new UnintentionalCodeFirstException();
    }

<#+
    foreach (var entitySet in container.BaseEntitySets.OfType<EntitySet>())
    {
#>
	<#=codeStringGenerator.IDbSet(entitySet)#>
<#+
    }

	foreach (var edmFunction in container.FunctionImports)
    {
        WriteFunctionImport(typeMapper, codeStringGenerator, edmFunction, modelNamespace, includeMergeOption: false);
    }


	#>

	        public void SetModified(object entity)
        {
            Entry(entity).State = System.Data.EntityState.Modified;
        }

        public void SetAdded(object entity)
        {
            Entry(entity).State = System.Data.EntityState.Added;
        }
    

}



}
	
<#+
return modelName;
    }
#>

<#+
    string GenerateModelIContext(string modelInterfaceName)
    {
		const string inputFile = @"../Model/UserModel.edmx";
		var textTransform = DynamicTextTransformation.Create(this);
		var code = new CodeGenerationTools(this);
		var ef = new MetadataTools(this);
		var typeMapper = new TypeMapper(code, ef, textTransform.Errors);
		var	fileManager = EntityFrameworkTemplateFileManager.Create(this);
		var loader = new EdmMetadataLoader(textTransform.Host, textTransform.Errors);
		var itemCollection = loader.CreateEdmItemCollection(inputFile);
		var modelNamespace = loader.GetModelNamespace(inputFile);
		var codeStringGenerator = new CodeStringGenerator(code, typeMapper, ef);
		
		var container = itemCollection.OfType<EntityContainer>().FirstOrDefault();
		if (container == null)
		{
			return "";
		}

		modelInterfaceName = ((string.IsNullOrEmpty(modelInterfaceName)) ? "I" + code.Escape(container) : modelInterfaceName);
#>
//------------------------------------------------------------------------------
// <auto-generated>
// <#=GetResourceString("Template_GeneratedCodeCommentLine1")#>
//
// <#=GetResourceString("Template_GeneratedCodeCommentLine2")#>
// <#=GetResourceString("Template_GeneratedCodeCommentLine3")#>
// </auto-generated>
//------------------------------------------------------------------------------
<#+
var codeNamespace = code.VsNamespaceSuggestion();
if (!String.IsNullOrEmpty(codeNamespace))
{
#>
namespace <#=code.EscapeNamespace(codeNamespace)#>
{
<#+
    PushIndent("    ");
}
#>
using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
<#+
if (container.FunctionImports.Any())
{
#>
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
<#+
}
#>

<#=Accessibility.ForType(container)#> partial interface <#=modelInterfaceName#> : IContext
{

	

<#+
    foreach (var entitySet in container.BaseEntitySets.OfType<EntitySet>())
    {
	#>
		 <#=codeStringGenerator.IDbSet_Interface(entitySet)#>
<#+
    }

	foreach (var edmFunction in container.FunctionImports)
    {
        WriteFunctionImport(typeMapper, codeStringGenerator, edmFunction, modelNamespace, includeMergeOption: false);
    }
	#>
    

}



}

<#+
return modelInterfaceName;
    }
#>

<#+
string GenerateBaseIContext(string interfaceName){

	var textTransform = DynamicTextTransformation.Create(this);
	var code = new CodeGenerationTools(this);
#>

//------------------------------------------------------------------------------
// <auto-generated>
// <#=GetResourceString("Template_GeneratedCodeCommentLine1")#>
//
// <#=GetResourceString("Template_GeneratedCodeCommentLine2")#>
// <#=GetResourceString("Template_GeneratedCodeCommentLine3")#>
// </auto-generated>
//------------------------------------------------------------------------------
<#+
var codeNamespace = code.VsNamespaceSuggestion();
if (!String.IsNullOrEmpty(codeNamespace))
{
#>
namespace <#=code.EscapeNamespace(codeNamespace)#>
{
<#+
    PushIndent("    ");
}
#>
using System;

public partial interface <#=interfaceName#> : IDisposable
{
	int SaveChanges();
    void SetModified(object entity);
    void SetAdded(object entity);
}
}
<#+

return interfaceName;
}

#>





